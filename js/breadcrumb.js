// Generated by CoffeeScript 1.3.3
(function() {

  window.Breadcrumb = (function() {

    Breadcrumb.prototype._makeCrumb = function(x, y, text, active) {
      var arrowWidth, box, c, fontSize, height, isStart, padding, path, s, ty, w;
      arrowWidth = 15;
      isStart = true;
      padding = 30;
      if (typeof x === 'object') {
        isStart = false;
        box = x.getBBox();
        x = box.x + box.width - arrowWidth;
      }
      x = parseInt(x);
      fontSize = 15;
      s = this.r.print(0, 0, text, this.r.getFont("Museo Sans 500"), fontSize);
      w = parseInt(s.getBBox().width + (padding * 2) + arrowWidth);
      s.remove();
      if (isStart) {
        w = w - arrowWidth;
      }
      height = 20;
      if (active) {
        height = height + 2;
        y = y - 2;
        arrowWidth = arrowWidth + 1;
        x = x - 2;
        fontSize = fontSize + 2;
      }
      path = "M " + x + " " + y + " l " + w + " 0 l " + arrowWidth + " " + height + " l -" + arrowWidth + " " + height + " l -" + w + " 0 ";
      if (isStart) {
        path += "s -5 0 -5 -5 l 0 -" + ((height * 2) - 10) + " s 0 -5 5 -5";
      } else {
        path += "l " + arrowWidth + " -" + height + " z";
      }
      c = this.r.path(path);
      c.path = path;
      if (active) {
        c.attr({
          gradient: '90-#236aa7-#31abd2',
          'stroke-linejoin': 'round',
          'stroke-width': 0
        });
        y = y + 2;
      } else {
        c.attr({
          gradient: '90-#b3b6b5-#ffffff',
          'stroke-width': 1,
          cursor: 'pointer',
          stroke: '#a3a6a5'
        });
      }
      box = c.getBBox();
      ty = parseInt(box.y + (box.height / 2));
      if (active) {
        ty = ty - 1;
      }
      if (isStart) {
        c.mytext = this.r.print(x + padding, ty, text, this.r.getFont("Museo Sans 500"), fontSize);
      } else {
        c.mytext = this.r.print(x + padding + arrowWidth, ty, text, this.r.getFont("Museo Sans 500"), fontSize);
      }
      if (active) {
        c.mytext.attr({
          fill: '#fff'
        });
      } else {
        c.blanket = this.r.rect().attr(c.mytext.getBBox()).attr({
          fill: "#000",
          opacity: 0,
          cursor: 'pointer'
        }).click(function() {
          return c.makeActive();
        });
      }
      return c;
    };

    Breadcrumb.prototype._makeSection = function(x, y, text, cb) {
      var el,
        _this = this;
      el = this._makeCrumb(x, y, text);
      el.makeActive = function() {
        var attr, cloned;
        if (!el.disabled) {
          if (_this.current) {
            cloned = _this.current.active.clone();
            _this.current.active.hide();
            _this.current.active.mytext.hide();
            attr = el.active.attr();
            el.active.mytext.attr({
              fill: '#236aa7'
            }).animate({
              fill: '#fff'
            }, 700, 'easeOut');
            return cloned.animate({
              path: attr.path
            }, 250, 'easeOut', function() {
              _this.current = el;
              _this.current.active.show();
              _this.current.active.mytext.show();
              cloned.remove();
              return typeof cb === "function" ? cb() : void 0;
            });
          } else {
            _this.current = el;
            _this.current.active.show();
            _this.current.active.mytext.show();
            return typeof cb === "function" ? cb() : void 0;
          }
        }
      };
      el.makeDisabled = function() {
        if (!el.disabled) {
          el.disabled = true;
          el.attr({
            gradient: '90-#ddd-#ddd',
            cursor: 'not-allowed'
          });
          el.mytext.attr({
            fill: '#aaa'
          });
          return el.blanket.attr({
            cursor: 'not-allowed'
          });
        }
      };
      el.makeEnabled = function() {
        if (el.disabled) {
          el.disabled = false;
          el.attr({
            gradient: '90-#b3b6b5-#ffffff',
            cursor: 'pointer'
          });
          el.mytext.attr({
            fill: '#000'
          });
          return el.blanket.attr({
            cursor: 'pointer'
          });
        }
      };
      el.node.onclick = el.makeActive;
      el.active = this._makeCrumb(x, y, text, true);
      el.active.hide();
      el.active.mytext.hide();
      return el;
    };

    Breadcrumb.prototype.make = function(text, cb) {
      var section, x, y;
      x = 10;
      if (this.previous) {
        x = this.previous;
      }
      y = 10;
      section = this._makeSection(x, y, text, cb);
      this.sections[text] = section;
      this.previous = section;
      return section;
    };

    Breadcrumb.prototype.get = function(text) {
      return this.sections[text];
    };

    function Breadcrumb(id) {
      this.sections = {};
      this.r = Raphael(id);
    }

    return Breadcrumb;

  })();

}).call(this);
